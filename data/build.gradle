plugins {
    id 'com.android.library'
    id 'org.jetbrains.kotlin.android'
    id 'dagger.hilt.android.plugin'
    id 'org.jetbrains.kotlin.kapt'
}
android {
    namespace 'com.oborodulin.home.data'
    compileSdk cfg.sdk.compileVersion

    defaultConfig {
        minSdk cfg.sdk.minVersion
        targetSdk cfg.sdk.targetVersion

        kapt {
            //ERROR : error.NonExistentClass Kotlin In multi module Dagger project
            //https://kotlinlang.org/docs/reference/kapt.html#non-existent-type-correction
            correctErrorTypes = true
            arguments {
                arg("room.schemaLocation", "$projectDir/schemas")
            }
        }
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ["room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        testInstrumentationRunnerArguments clearPackageData: 'true'
        testInstrumentationRunnerArguments useTestStorageService: 'true'

        consumerProguardFiles "consumer-rules.pro"
    }
    buildTypes {
        debug {
            testCoverageEnabled true
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility cfg.jvm.compatibility.source
        targetCompatibility cfg.jvm.compatibility.target

        // Desugaring: Newer versions of the Android Gradle plugin (starting with 4.0) are able to use desugaring to
        // backport new APIs to older versions of Android.
        // You can read more about it here: https://jakewharton.com/d8-library-desugaring/
        // https://www.rockandnull.com/java-time-android/
        //coreLibraryDesugaringEnabled true
    }
    kotlinOptions {
        jvmTarget = cfg.jvm.target
    }
    sourceSets {
        androidTest.assets.srcDirs += files("$projectDir/schemas".toString())
        //test.java.srcDirs += files("$projectDir/schemas".toString())
    }
    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }
}

dependencies {
    implementation(project(':common'))
    implementation(project(':domain'))

    // Logging
    implementation deps.logging.timber
    implementation deps.logging.logger
    // Room
    kapt deps.room.compiler
    implementation deps.room.runtime
    implementation deps.room.ktx
    // Hilt
    implementation deps.dagger.hilt
    kapt deps.dagger.compiler
    implementation deps.hilt.navigationCompose

    implementation deps.jvm.inject
    implementation deps.coroutines.android
    implementation deps.coroutines.core
    // Desugaring
    //coreLibraryDesugaring deps.tools.desugar
    // Networking
    implementation deps.retrofit2.retrofit
    implementation deps.retrofit2.converterGson
    implementation deps.retrofit2.converterScalars
    implementation deps.okhttp3.loggingInterceptor

    // Testing: Local
    testImplementation deps.test.extJunitKtx
    testImplementation deps.test.runner

    testImplementation deps.test.junit
    testImplementation deps.test.robolectric
    testImplementation deps.test.mockito
    testImplementation deps.test.coroutines
    testImplementation deps.coroutines.android
    testImplementation deps.test.archCore
    testImplementation deps.test.core
    testImplementation deps.test.truth
    //testImplementation deps.test.hamcrest
    testImplementation deps.dagger.testing
    testImplementation deps.test.turbine
    kaptTest deps.dagger.hiltCompiler

    // Testing: Instrumental
    /*
    kaptAndroidTest deps.dagger.hiltCompiler
    androidTestImplementation deps.dagger.testing
    androidTestImplementation deps.test.coroutines
    androidTestImplementation deps.test.espressoCore
    androidTestImplementation deps.test.hamcrest
    androidTestImplementation deps.test.turbine
     */
}