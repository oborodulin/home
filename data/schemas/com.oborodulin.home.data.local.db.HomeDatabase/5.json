{
  "formatVersion": 1,
  "database": {
    "version": 5,
    "identityHash": "3d3633bcd011a034a226a4532d841fc2",
    "entities": [
      {
        "tableName": "app_settings",
        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`settingId` TEXT NOT NULL, `paramName` TEXT NOT NULL, `paramValue` TEXT NOT NULL, PRIMARY KEY(`settingId`))",
        "fields": [
          {
            "fieldPath": "settingId",
            "columnName": "settingId",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "paramName",
            "columnName": "paramName",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "paramValue",
            "columnName": "paramValue",
            "affinity": "TEXT",
            "notNull": true
          }
        ],
        "primaryKey": {
          "columnNames": [
            "settingId"
          ],
          "autoGenerate": false
        },
        "indices": [
          {
            "name": "index_app_settings_paramName",
            "unique": true,
            "columnNames": [
              "paramName"
            ],
            "orders": [],
            "createSql": "CREATE UNIQUE INDEX IF NOT EXISTS `index_app_settings_paramName` ON `${TABLE_NAME}` (`paramName`)"
          }
        ],
        "foreignKeys": []
      },
      {
        "tableName": "payers",
        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`payerId` TEXT NOT NULL, `ercCode` TEXT NOT NULL, `fullName` TEXT NOT NULL, `address` TEXT NOT NULL, `totalArea` INTEGER, `livingSpace` INTEGER, `heatedVolume` INTEGER, `paymentDay` INTEGER NOT NULL, `personsNum` INTEGER NOT NULL, `isAlignByPaymentDay` INTEGER NOT NULL, `isFavorite` INTEGER NOT NULL, PRIMARY KEY(`payerId`))",
        "fields": [
          {
            "fieldPath": "payerId",
            "columnName": "payerId",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "ercCode",
            "columnName": "ercCode",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "fullName",
            "columnName": "fullName",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "address",
            "columnName": "address",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "totalArea",
            "columnName": "totalArea",
            "affinity": "INTEGER",
            "notNull": false
          },
          {
            "fieldPath": "livingSpace",
            "columnName": "livingSpace",
            "affinity": "INTEGER",
            "notNull": false
          },
          {
            "fieldPath": "heatedVolume",
            "columnName": "heatedVolume",
            "affinity": "INTEGER",
            "notNull": false
          },
          {
            "fieldPath": "paymentDay",
            "columnName": "paymentDay",
            "affinity": "INTEGER",
            "notNull": true
          },
          {
            "fieldPath": "personsNum",
            "columnName": "personsNum",
            "affinity": "INTEGER",
            "notNull": true
          },
          {
            "fieldPath": "isAlignByPaymentDay",
            "columnName": "isAlignByPaymentDay",
            "affinity": "INTEGER",
            "notNull": true
          },
          {
            "fieldPath": "isFavorite",
            "columnName": "isFavorite",
            "affinity": "INTEGER",
            "notNull": true
          }
        ],
        "primaryKey": {
          "columnNames": [
            "payerId"
          ],
          "autoGenerate": false
        },
        "indices": [
          {
            "name": "index_payers_ercCode",
            "unique": true,
            "columnNames": [
              "ercCode"
            ],
            "orders": [],
            "createSql": "CREATE UNIQUE INDEX IF NOT EXISTS `index_payers_ercCode` ON `${TABLE_NAME}` (`ercCode`)"
          }
        ],
        "foreignKeys": []
      },
      {
        "tableName": "services",
        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`serviceId` TEXT NOT NULL, `servicePos` INTEGER, `serviceType` TEXT NOT NULL, `serviceMeterType` TEXT NOT NULL, PRIMARY KEY(`serviceId`))",
        "fields": [
          {
            "fieldPath": "serviceId",
            "columnName": "serviceId",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "servicePos",
            "columnName": "servicePos",
            "affinity": "INTEGER",
            "notNull": false
          },
          {
            "fieldPath": "serviceType",
            "columnName": "serviceType",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "serviceMeterType",
            "columnName": "serviceMeterType",
            "affinity": "TEXT",
            "notNull": true
          }
        ],
        "primaryKey": {
          "columnNames": [
            "serviceId"
          ],
          "autoGenerate": false
        },
        "indices": [
          {
            "name": "index_services_serviceType",
            "unique": true,
            "columnNames": [
              "serviceType"
            ],
            "orders": [],
            "createSql": "CREATE UNIQUE INDEX IF NOT EXISTS `index_services_serviceType` ON `${TABLE_NAME}` (`serviceType`)"
          }
        ],
        "foreignKeys": []
      },
      {
        "tableName": "services_tl",
        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`serviceTlId` TEXT NOT NULL, `serviceLocCode` TEXT NOT NULL, `serviceName` TEXT NOT NULL, `serviceMeasureUnit` TEXT, `serviceDesc` TEXT, `servicesId` TEXT NOT NULL, PRIMARY KEY(`serviceTlId`), FOREIGN KEY(`servicesId`) REFERENCES `services`(`serviceId`) ON UPDATE NO ACTION ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED)",
        "fields": [
          {
            "fieldPath": "serviceTlId",
            "columnName": "serviceTlId",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "serviceLocCode",
            "columnName": "serviceLocCode",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "serviceName",
            "columnName": "serviceName",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "serviceMeasureUnit",
            "columnName": "serviceMeasureUnit",
            "affinity": "TEXT",
            "notNull": false
          },
          {
            "fieldPath": "serviceDesc",
            "columnName": "serviceDesc",
            "affinity": "TEXT",
            "notNull": false
          },
          {
            "fieldPath": "servicesId",
            "columnName": "servicesId",
            "affinity": "TEXT",
            "notNull": true
          }
        ],
        "primaryKey": {
          "columnNames": [
            "serviceTlId"
          ],
          "autoGenerate": false
        },
        "indices": [
          {
            "name": "index_services_tl_serviceLocCode_servicesId",
            "unique": true,
            "columnNames": [
              "serviceLocCode",
              "servicesId"
            ],
            "orders": [],
            "createSql": "CREATE UNIQUE INDEX IF NOT EXISTS `index_services_tl_serviceLocCode_servicesId` ON `${TABLE_NAME}` (`serviceLocCode`, `servicesId`)"
          },
          {
            "name": "index_services_tl_servicesId",
            "unique": false,
            "columnNames": [
              "servicesId"
            ],
            "orders": [],
            "createSql": "CREATE INDEX IF NOT EXISTS `index_services_tl_servicesId` ON `${TABLE_NAME}` (`servicesId`)"
          }
        ],
        "foreignKeys": [
          {
            "table": "services",
            "onDelete": "CASCADE",
            "onUpdate": "NO ACTION",
            "columns": [
              "servicesId"
            ],
            "referencedColumns": [
              "serviceId"
            ]
          }
        ]
      },
      {
        "tableName": "payers_services",
        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`payerServiceId` TEXT NOT NULL, `fromMonth` INTEGER, `fromYear` INTEGER, `isMeterOwner` INTEGER NOT NULL, `isPrivileges` INTEGER NOT NULL, `isAllocateRate` INTEGER NOT NULL, `payersId` TEXT NOT NULL, `servicesId` TEXT NOT NULL, PRIMARY KEY(`payerServiceId`), FOREIGN KEY(`payersId`) REFERENCES `payers`(`payerId`) ON UPDATE NO ACTION ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED, FOREIGN KEY(`servicesId`) REFERENCES `services`(`serviceId`) ON UPDATE NO ACTION ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED)",
        "fields": [
          {
            "fieldPath": "payerServiceId",
            "columnName": "payerServiceId",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "fromMonth",
            "columnName": "fromMonth",
            "affinity": "INTEGER",
            "notNull": false
          },
          {
            "fieldPath": "fromYear",
            "columnName": "fromYear",
            "affinity": "INTEGER",
            "notNull": false
          },
          {
            "fieldPath": "isMeterOwner",
            "columnName": "isMeterOwner",
            "affinity": "INTEGER",
            "notNull": true
          },
          {
            "fieldPath": "isPrivileges",
            "columnName": "isPrivileges",
            "affinity": "INTEGER",
            "notNull": true
          },
          {
            "fieldPath": "isAllocateRate",
            "columnName": "isAllocateRate",
            "affinity": "INTEGER",
            "notNull": true
          },
          {
            "fieldPath": "payersId",
            "columnName": "payersId",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "servicesId",
            "columnName": "servicesId",
            "affinity": "TEXT",
            "notNull": true
          }
        ],
        "primaryKey": {
          "columnNames": [
            "payerServiceId"
          ],
          "autoGenerate": false
        },
        "indices": [
          {
            "name": "index_payers_services_payersId_servicesId_isPrivileges",
            "unique": true,
            "columnNames": [
              "payersId",
              "servicesId",
              "isPrivileges"
            ],
            "orders": [],
            "createSql": "CREATE UNIQUE INDEX IF NOT EXISTS `index_payers_services_payersId_servicesId_isPrivileges` ON `${TABLE_NAME}` (`payersId`, `servicesId`, `isPrivileges`)"
          },
          {
            "name": "index_payers_services_payersId",
            "unique": false,
            "columnNames": [
              "payersId"
            ],
            "orders": [],
            "createSql": "CREATE INDEX IF NOT EXISTS `index_payers_services_payersId` ON `${TABLE_NAME}` (`payersId`)"
          },
          {
            "name": "index_payers_services_servicesId",
            "unique": false,
            "columnNames": [
              "servicesId"
            ],
            "orders": [],
            "createSql": "CREATE INDEX IF NOT EXISTS `index_payers_services_servicesId` ON `${TABLE_NAME}` (`servicesId`)"
          }
        ],
        "foreignKeys": [
          {
            "table": "payers",
            "onDelete": "CASCADE",
            "onUpdate": "NO ACTION",
            "columns": [
              "payersId"
            ],
            "referencedColumns": [
              "payerId"
            ]
          },
          {
            "table": "services",
            "onDelete": "CASCADE",
            "onUpdate": "NO ACTION",
            "columns": [
              "servicesId"
            ],
            "referencedColumns": [
              "serviceId"
            ]
          }
        ]
      },
      {
        "tableName": "rates",
        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`rateId` TEXT NOT NULL, `startDate` TEXT NOT NULL, `fromMeterValue` INTEGER, `toMeterValue` INTEGER, `rateValue` INTEGER NOT NULL, `isPerPerson` INTEGER NOT NULL, `isPrivileges` INTEGER NOT NULL, `servicesId` TEXT NOT NULL, `payersServicesId` TEXT, PRIMARY KEY(`rateId`), FOREIGN KEY(`servicesId`) REFERENCES `services`(`serviceId`) ON UPDATE NO ACTION ON DELETE CASCADE , FOREIGN KEY(`payersServicesId`) REFERENCES `payers_services`(`payerServiceId`) ON UPDATE NO ACTION ON DELETE CASCADE )",
        "fields": [
          {
            "fieldPath": "rateId",
            "columnName": "rateId",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "startDate",
            "columnName": "startDate",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "fromMeterValue",
            "columnName": "fromMeterValue",
            "affinity": "INTEGER",
            "notNull": false
          },
          {
            "fieldPath": "toMeterValue",
            "columnName": "toMeterValue",
            "affinity": "INTEGER",
            "notNull": false
          },
          {
            "fieldPath": "rateValue",
            "columnName": "rateValue",
            "affinity": "INTEGER",
            "notNull": true
          },
          {
            "fieldPath": "isPerPerson",
            "columnName": "isPerPerson",
            "affinity": "INTEGER",
            "notNull": true
          },
          {
            "fieldPath": "isPrivileges",
            "columnName": "isPrivileges",
            "affinity": "INTEGER",
            "notNull": true
          },
          {
            "fieldPath": "servicesId",
            "columnName": "servicesId",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "payersServicesId",
            "columnName": "payersServicesId",
            "affinity": "TEXT",
            "notNull": false
          }
        ],
        "primaryKey": {
          "columnNames": [
            "rateId"
          ],
          "autoGenerate": false
        },
        "indices": [
          {
            "name": "index_rates_servicesId_payersServicesId_startDate_fromMeterValue_isPerPerson_isPrivileges",
            "unique": true,
            "columnNames": [
              "servicesId",
              "payersServicesId",
              "startDate",
              "fromMeterValue",
              "isPerPerson",
              "isPrivileges"
            ],
            "orders": [],
            "createSql": "CREATE UNIQUE INDEX IF NOT EXISTS `index_rates_servicesId_payersServicesId_startDate_fromMeterValue_isPerPerson_isPrivileges` ON `${TABLE_NAME}` (`servicesId`, `payersServicesId`, `startDate`, `fromMeterValue`, `isPerPerson`, `isPrivileges`)"
          },
          {
            "name": "index_rates_servicesId",
            "unique": false,
            "columnNames": [
              "servicesId"
            ],
            "orders": [],
            "createSql": "CREATE INDEX IF NOT EXISTS `index_rates_servicesId` ON `${TABLE_NAME}` (`servicesId`)"
          },
          {
            "name": "index_rates_payersServicesId",
            "unique": false,
            "columnNames": [
              "payersServicesId"
            ],
            "orders": [],
            "createSql": "CREATE INDEX IF NOT EXISTS `index_rates_payersServicesId` ON `${TABLE_NAME}` (`payersServicesId`)"
          }
        ],
        "foreignKeys": [
          {
            "table": "services",
            "onDelete": "CASCADE",
            "onUpdate": "NO ACTION",
            "columns": [
              "servicesId"
            ],
            "referencedColumns": [
              "serviceId"
            ]
          },
          {
            "table": "payers_services",
            "onDelete": "CASCADE",
            "onUpdate": "NO ACTION",
            "columns": [
              "payersServicesId"
            ],
            "referencedColumns": [
              "payerServiceId"
            ]
          }
        ]
      },
      {
        "tableName": "service_activities",
        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`serviceActivityId` TEXT NOT NULL, `fromDate` TEXT NOT NULL, `toDate` TEXT, `isActive` INTEGER NOT NULL, `payersServicesId` TEXT NOT NULL, PRIMARY KEY(`serviceActivityId`), FOREIGN KEY(`payersServicesId`) REFERENCES `payers_services`(`payerServiceId`) ON UPDATE NO ACTION ON DELETE CASCADE )",
        "fields": [
          {
            "fieldPath": "serviceActivityId",
            "columnName": "serviceActivityId",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "fromDate",
            "columnName": "fromDate",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "toDate",
            "columnName": "toDate",
            "affinity": "TEXT",
            "notNull": false
          },
          {
            "fieldPath": "isActive",
            "columnName": "isActive",
            "affinity": "INTEGER",
            "notNull": true
          },
          {
            "fieldPath": "payersServicesId",
            "columnName": "payersServicesId",
            "affinity": "TEXT",
            "notNull": true
          }
        ],
        "primaryKey": {
          "columnNames": [
            "serviceActivityId"
          ],
          "autoGenerate": false
        },
        "indices": [
          {
            "name": "index_service_activities_payersServicesId",
            "unique": false,
            "columnNames": [
              "payersServicesId"
            ],
            "orders": [],
            "createSql": "CREATE INDEX IF NOT EXISTS `index_service_activities_payersServicesId` ON `${TABLE_NAME}` (`payersServicesId`)"
          }
        ],
        "foreignKeys": [
          {
            "table": "payers_services",
            "onDelete": "CASCADE",
            "onUpdate": "NO ACTION",
            "columns": [
              "payersServicesId"
            ],
            "referencedColumns": [
              "payerServiceId"
            ]
          }
        ]
      },
      {
        "tableName": "service_promotions",
        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`servicePromotionId` TEXT NOT NULL, `paymentMonths` INTEGER NOT NULL, `isPrevRate` INTEGER NOT NULL, `isActive` INTEGER NOT NULL, `servicesId` TEXT NOT NULL, `payersServicesId` TEXT, PRIMARY KEY(`servicePromotionId`), FOREIGN KEY(`servicesId`) REFERENCES `services`(`serviceId`) ON UPDATE NO ACTION ON DELETE CASCADE , FOREIGN KEY(`payersServicesId`) REFERENCES `payers_services`(`payerServiceId`) ON UPDATE NO ACTION ON DELETE CASCADE )",
        "fields": [
          {
            "fieldPath": "servicePromotionId",
            "columnName": "servicePromotionId",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "paymentMonths",
            "columnName": "paymentMonths",
            "affinity": "INTEGER",
            "notNull": true
          },
          {
            "fieldPath": "isPrevRate",
            "columnName": "isPrevRate",
            "affinity": "INTEGER",
            "notNull": true
          },
          {
            "fieldPath": "isActive",
            "columnName": "isActive",
            "affinity": "INTEGER",
            "notNull": true
          },
          {
            "fieldPath": "servicesId",
            "columnName": "servicesId",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "payersServicesId",
            "columnName": "payersServicesId",
            "affinity": "TEXT",
            "notNull": false
          }
        ],
        "primaryKey": {
          "columnNames": [
            "servicePromotionId"
          ],
          "autoGenerate": false
        },
        "indices": [
          {
            "name": "index_service_promotions_servicesId",
            "unique": false,
            "columnNames": [
              "servicesId"
            ],
            "orders": [],
            "createSql": "CREATE INDEX IF NOT EXISTS `index_service_promotions_servicesId` ON `${TABLE_NAME}` (`servicesId`)"
          },
          {
            "name": "index_service_promotions_payersServicesId",
            "unique": false,
            "columnNames": [
              "payersServicesId"
            ],
            "orders": [],
            "createSql": "CREATE INDEX IF NOT EXISTS `index_service_promotions_payersServicesId` ON `${TABLE_NAME}` (`payersServicesId`)"
          }
        ],
        "foreignKeys": [
          {
            "table": "services",
            "onDelete": "CASCADE",
            "onUpdate": "NO ACTION",
            "columns": [
              "servicesId"
            ],
            "referencedColumns": [
              "serviceId"
            ]
          },
          {
            "table": "payers_services",
            "onDelete": "CASCADE",
            "onUpdate": "NO ACTION",
            "columns": [
              "payersServicesId"
            ],
            "referencedColumns": [
              "payerServiceId"
            ]
          }
        ]
      },
      {
        "tableName": "meters",
        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`meterId` TEXT NOT NULL, `meterNum` TEXT NOT NULL, `meterType` TEXT NOT NULL, `maxValue` INTEGER NOT NULL, `passportDate` TEXT, `initValue` INTEGER, `verificationPeriod` INTEGER, `payersId` TEXT NOT NULL, PRIMARY KEY(`meterId`), FOREIGN KEY(`payersId`) REFERENCES `payers`(`payerId`) ON UPDATE NO ACTION ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED)",
        "fields": [
          {
            "fieldPath": "meterId",
            "columnName": "meterId",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "meterNum",
            "columnName": "meterNum",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "meterType",
            "columnName": "meterType",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "maxValue",
            "columnName": "maxValue",
            "affinity": "INTEGER",
            "notNull": true
          },
          {
            "fieldPath": "passportDate",
            "columnName": "passportDate",
            "affinity": "TEXT",
            "notNull": false
          },
          {
            "fieldPath": "initValue",
            "columnName": "initValue",
            "affinity": "INTEGER",
            "notNull": false
          },
          {
            "fieldPath": "verificationPeriod",
            "columnName": "verificationPeriod",
            "affinity": "INTEGER",
            "notNull": false
          },
          {
            "fieldPath": "payersId",
            "columnName": "payersId",
            "affinity": "TEXT",
            "notNull": true
          }
        ],
        "primaryKey": {
          "columnNames": [
            "meterId"
          ],
          "autoGenerate": false
        },
        "indices": [
          {
            "name": "index_meters_payersId_meterNum_meterType_passportDate",
            "unique": true,
            "columnNames": [
              "payersId",
              "meterNum",
              "meterType",
              "passportDate"
            ],
            "orders": [],
            "createSql": "CREATE UNIQUE INDEX IF NOT EXISTS `index_meters_payersId_meterNum_meterType_passportDate` ON `${TABLE_NAME}` (`payersId`, `meterNum`, `meterType`, `passportDate`)"
          },
          {
            "name": "index_meters_payersId",
            "unique": false,
            "columnNames": [
              "payersId"
            ],
            "orders": [],
            "createSql": "CREATE INDEX IF NOT EXISTS `index_meters_payersId` ON `${TABLE_NAME}` (`payersId`)"
          }
        ],
        "foreignKeys": [
          {
            "table": "payers",
            "onDelete": "CASCADE",
            "onUpdate": "NO ACTION",
            "columns": [
              "payersId"
            ],
            "referencedColumns": [
              "payerId"
            ]
          }
        ]
      },
      {
        "tableName": "meters_tl",
        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`meterTlId` TEXT NOT NULL, `meterLocCode` TEXT NOT NULL, `meterMeasureUnit` TEXT NOT NULL, `meterDesc` TEXT, `metersId` TEXT NOT NULL, PRIMARY KEY(`meterTlId`), FOREIGN KEY(`metersId`) REFERENCES `meters`(`meterId`) ON UPDATE NO ACTION ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED)",
        "fields": [
          {
            "fieldPath": "meterTlId",
            "columnName": "meterTlId",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "meterLocCode",
            "columnName": "meterLocCode",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "meterMeasureUnit",
            "columnName": "meterMeasureUnit",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "meterDesc",
            "columnName": "meterDesc",
            "affinity": "TEXT",
            "notNull": false
          },
          {
            "fieldPath": "metersId",
            "columnName": "metersId",
            "affinity": "TEXT",
            "notNull": true
          }
        ],
        "primaryKey": {
          "columnNames": [
            "meterTlId"
          ],
          "autoGenerate": false
        },
        "indices": [
          {
            "name": "index_meters_tl_meterLocCode_metersId",
            "unique": true,
            "columnNames": [
              "meterLocCode",
              "metersId"
            ],
            "orders": [],
            "createSql": "CREATE UNIQUE INDEX IF NOT EXISTS `index_meters_tl_meterLocCode_metersId` ON `${TABLE_NAME}` (`meterLocCode`, `metersId`)"
          },
          {
            "name": "index_meters_tl_metersId",
            "unique": false,
            "columnNames": [
              "metersId"
            ],
            "orders": [],
            "createSql": "CREATE INDEX IF NOT EXISTS `index_meters_tl_metersId` ON `${TABLE_NAME}` (`metersId`)"
          }
        ],
        "foreignKeys": [
          {
            "table": "meters",
            "onDelete": "CASCADE",
            "onUpdate": "NO ACTION",
            "columns": [
              "metersId"
            ],
            "referencedColumns": [
              "meterId"
            ]
          }
        ]
      },
      {
        "tableName": "meter_values",
        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`meterValueId` TEXT NOT NULL, `valueDate` TEXT NOT NULL, `meterValue` INTEGER, `metersId` TEXT NOT NULL, PRIMARY KEY(`meterValueId`), FOREIGN KEY(`metersId`) REFERENCES `meters`(`meterId`) ON UPDATE NO ACTION ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED)",
        "fields": [
          {
            "fieldPath": "meterValueId",
            "columnName": "meterValueId",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "valueDate",
            "columnName": "valueDate",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "meterValue",
            "columnName": "meterValue",
            "affinity": "INTEGER",
            "notNull": false
          },
          {
            "fieldPath": "metersId",
            "columnName": "metersId",
            "affinity": "TEXT",
            "notNull": true
          }
        ],
        "primaryKey": {
          "columnNames": [
            "meterValueId"
          ],
          "autoGenerate": false
        },
        "indices": [
          {
            "name": "index_meter_values_metersId",
            "unique": false,
            "columnNames": [
              "metersId"
            ],
            "orders": [],
            "createSql": "CREATE INDEX IF NOT EXISTS `index_meter_values_metersId` ON `${TABLE_NAME}` (`metersId`)"
          }
        ],
        "foreignKeys": [
          {
            "table": "meters",
            "onDelete": "CASCADE",
            "onUpdate": "NO ACTION",
            "columns": [
              "metersId"
            ],
            "referencedColumns": [
              "meterId"
            ]
          }
        ]
      },
      {
        "tableName": "meter_verifications",
        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`meterVerificationId` TEXT NOT NULL, `startDate` TEXT NOT NULL, `endDate` TEXT, `startMeterValue` INTEGER NOT NULL, `endMeterValue` INTEGER, `isOk` INTEGER NOT NULL, `metersId` TEXT NOT NULL, PRIMARY KEY(`meterVerificationId`), FOREIGN KEY(`metersId`) REFERENCES `meters`(`meterId`) ON UPDATE NO ACTION ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED)",
        "fields": [
          {
            "fieldPath": "meterVerificationId",
            "columnName": "meterVerificationId",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "startDate",
            "columnName": "startDate",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "endDate",
            "columnName": "endDate",
            "affinity": "TEXT",
            "notNull": false
          },
          {
            "fieldPath": "startMeterValue",
            "columnName": "startMeterValue",
            "affinity": "INTEGER",
            "notNull": true
          },
          {
            "fieldPath": "endMeterValue",
            "columnName": "endMeterValue",
            "affinity": "INTEGER",
            "notNull": false
          },
          {
            "fieldPath": "isOk",
            "columnName": "isOk",
            "affinity": "INTEGER",
            "notNull": true
          },
          {
            "fieldPath": "metersId",
            "columnName": "metersId",
            "affinity": "TEXT",
            "notNull": true
          }
        ],
        "primaryKey": {
          "columnNames": [
            "meterVerificationId"
          ],
          "autoGenerate": false
        },
        "indices": [
          {
            "name": "index_meter_verifications_metersId",
            "unique": false,
            "columnNames": [
              "metersId"
            ],
            "orders": [],
            "createSql": "CREATE INDEX IF NOT EXISTS `index_meter_verifications_metersId` ON `${TABLE_NAME}` (`metersId`)"
          }
        ],
        "foreignKeys": [
          {
            "table": "meters",
            "onDelete": "CASCADE",
            "onUpdate": "NO ACTION",
            "columns": [
              "metersId"
            ],
            "referencedColumns": [
              "meterId"
            ]
          }
        ]
      },
      {
        "tableName": "receipts",
        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`receiptId` TEXT NOT NULL, `receiptMonth` INTEGER NOT NULL, `receiptYear` INTEGER NOT NULL, `totalArea` INTEGER, `livingSpace` INTEGER, `heatedVolume` INTEGER, `personsNum` INTEGER NOT NULL, `isReceiptPaid` INTEGER NOT NULL, `payersId` TEXT NOT NULL, PRIMARY KEY(`receiptId`), FOREIGN KEY(`payersId`) REFERENCES `payers`(`payerId`) ON UPDATE NO ACTION ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED)",
        "fields": [
          {
            "fieldPath": "receiptId",
            "columnName": "receiptId",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "receiptMonth",
            "columnName": "receiptMonth",
            "affinity": "INTEGER",
            "notNull": true
          },
          {
            "fieldPath": "receiptYear",
            "columnName": "receiptYear",
            "affinity": "INTEGER",
            "notNull": true
          },
          {
            "fieldPath": "totalArea",
            "columnName": "totalArea",
            "affinity": "INTEGER",
            "notNull": false
          },
          {
            "fieldPath": "livingSpace",
            "columnName": "livingSpace",
            "affinity": "INTEGER",
            "notNull": false
          },
          {
            "fieldPath": "heatedVolume",
            "columnName": "heatedVolume",
            "affinity": "INTEGER",
            "notNull": false
          },
          {
            "fieldPath": "personsNum",
            "columnName": "personsNum",
            "affinity": "INTEGER",
            "notNull": true
          },
          {
            "fieldPath": "isReceiptPaid",
            "columnName": "isReceiptPaid",
            "affinity": "INTEGER",
            "notNull": true
          },
          {
            "fieldPath": "payersId",
            "columnName": "payersId",
            "affinity": "TEXT",
            "notNull": true
          }
        ],
        "primaryKey": {
          "columnNames": [
            "receiptId"
          ],
          "autoGenerate": false
        },
        "indices": [
          {
            "name": "index_receipts_payersId_receiptYear_receiptMonth",
            "unique": true,
            "columnNames": [
              "payersId",
              "receiptYear",
              "receiptMonth"
            ],
            "orders": [],
            "createSql": "CREATE UNIQUE INDEX IF NOT EXISTS `index_receipts_payersId_receiptYear_receiptMonth` ON `${TABLE_NAME}` (`payersId`, `receiptYear`, `receiptMonth`)"
          },
          {
            "name": "index_receipts_payersId",
            "unique": false,
            "columnNames": [
              "payersId"
            ],
            "orders": [],
            "createSql": "CREATE INDEX IF NOT EXISTS `index_receipts_payersId` ON `${TABLE_NAME}` (`payersId`)"
          }
        ],
        "foreignKeys": [
          {
            "table": "payers",
            "onDelete": "CASCADE",
            "onUpdate": "NO ACTION",
            "columns": [
              "payersId"
            ],
            "referencedColumns": [
              "payerId"
            ]
          }
        ]
      },
      {
        "tableName": "receipt_lines",
        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`receiptLineId` TEXT NOT NULL, `isServiceActive` INTEGER NOT NULL, `isPromotionActive` INTEGER NOT NULL, `isPrivileges` INTEGER NOT NULL, `isAllocateRate` INTEGER NOT NULL, `rateValue` INTEGER NOT NULL, `additionalPayment` INTEGER, `isLinePaid` INTEGER NOT NULL, `receiptsId` TEXT NOT NULL, `payersServicesId` TEXT NOT NULL, `ratesId` TEXT NOT NULL, `servicePromotionsId` TEXT, `meterValuesId` TEXT, PRIMARY KEY(`receiptLineId`), FOREIGN KEY(`receiptsId`) REFERENCES `receipts`(`receiptId`) ON UPDATE NO ACTION ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED, FOREIGN KEY(`payersServicesId`) REFERENCES `payers_services`(`payerServiceId`) ON UPDATE NO ACTION ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED, FOREIGN KEY(`ratesId`) REFERENCES `rates`(`rateId`) ON UPDATE NO ACTION ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED, FOREIGN KEY(`servicePromotionsId`) REFERENCES `service_promotions`(`servicePromotionId`) ON UPDATE NO ACTION ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED, FOREIGN KEY(`meterValuesId`) REFERENCES `meter_values`(`meterValueId`) ON UPDATE NO ACTION ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED)",
        "fields": [
          {
            "fieldPath": "receiptLineId",
            "columnName": "receiptLineId",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "isServiceActive",
            "columnName": "isServiceActive",
            "affinity": "INTEGER",
            "notNull": true
          },
          {
            "fieldPath": "isPromotionActive",
            "columnName": "isPromotionActive",
            "affinity": "INTEGER",
            "notNull": true
          },
          {
            "fieldPath": "isPrivileges",
            "columnName": "isPrivileges",
            "affinity": "INTEGER",
            "notNull": true
          },
          {
            "fieldPath": "isAllocateRate",
            "columnName": "isAllocateRate",
            "affinity": "INTEGER",
            "notNull": true
          },
          {
            "fieldPath": "rateValue",
            "columnName": "rateValue",
            "affinity": "INTEGER",
            "notNull": true
          },
          {
            "fieldPath": "additionalPayment",
            "columnName": "additionalPayment",
            "affinity": "INTEGER",
            "notNull": false
          },
          {
            "fieldPath": "isLinePaid",
            "columnName": "isLinePaid",
            "affinity": "INTEGER",
            "notNull": true
          },
          {
            "fieldPath": "receiptsId",
            "columnName": "receiptsId",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "payersServicesId",
            "columnName": "payersServicesId",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "ratesId",
            "columnName": "ratesId",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "servicePromotionsId",
            "columnName": "servicePromotionsId",
            "affinity": "TEXT",
            "notNull": false
          },
          {
            "fieldPath": "meterValuesId",
            "columnName": "meterValuesId",
            "affinity": "TEXT",
            "notNull": false
          }
        ],
        "primaryKey": {
          "columnNames": [
            "receiptLineId"
          ],
          "autoGenerate": false
        },
        "indices": [
          {
            "name": "index_receipt_lines_receiptsId",
            "unique": false,
            "columnNames": [
              "receiptsId"
            ],
            "orders": [],
            "createSql": "CREATE INDEX IF NOT EXISTS `index_receipt_lines_receiptsId` ON `${TABLE_NAME}` (`receiptsId`)"
          },
          {
            "name": "index_receipt_lines_payersServicesId",
            "unique": false,
            "columnNames": [
              "payersServicesId"
            ],
            "orders": [],
            "createSql": "CREATE INDEX IF NOT EXISTS `index_receipt_lines_payersServicesId` ON `${TABLE_NAME}` (`payersServicesId`)"
          },
          {
            "name": "index_receipt_lines_ratesId",
            "unique": false,
            "columnNames": [
              "ratesId"
            ],
            "orders": [],
            "createSql": "CREATE INDEX IF NOT EXISTS `index_receipt_lines_ratesId` ON `${TABLE_NAME}` (`ratesId`)"
          },
          {
            "name": "index_receipt_lines_servicePromotionsId",
            "unique": false,
            "columnNames": [
              "servicePromotionsId"
            ],
            "orders": [],
            "createSql": "CREATE INDEX IF NOT EXISTS `index_receipt_lines_servicePromotionsId` ON `${TABLE_NAME}` (`servicePromotionsId`)"
          },
          {
            "name": "index_receipt_lines_meterValuesId",
            "unique": false,
            "columnNames": [
              "meterValuesId"
            ],
            "orders": [],
            "createSql": "CREATE INDEX IF NOT EXISTS `index_receipt_lines_meterValuesId` ON `${TABLE_NAME}` (`meterValuesId`)"
          }
        ],
        "foreignKeys": [
          {
            "table": "receipts",
            "onDelete": "CASCADE",
            "onUpdate": "NO ACTION",
            "columns": [
              "receiptsId"
            ],
            "referencedColumns": [
              "receiptId"
            ]
          },
          {
            "table": "payers_services",
            "onDelete": "CASCADE",
            "onUpdate": "NO ACTION",
            "columns": [
              "payersServicesId"
            ],
            "referencedColumns": [
              "payerServiceId"
            ]
          },
          {
            "table": "rates",
            "onDelete": "CASCADE",
            "onUpdate": "NO ACTION",
            "columns": [
              "ratesId"
            ],
            "referencedColumns": [
              "rateId"
            ]
          },
          {
            "table": "service_promotions",
            "onDelete": "CASCADE",
            "onUpdate": "NO ACTION",
            "columns": [
              "servicePromotionsId"
            ],
            "referencedColumns": [
              "servicePromotionId"
            ]
          },
          {
            "table": "meter_values",
            "onDelete": "CASCADE",
            "onUpdate": "NO ACTION",
            "columns": [
              "meterValuesId"
            ],
            "referencedColumns": [
              "meterValueId"
            ]
          }
        ]
      }
    ],
    "views": [
      {
        "viewName": "meters_view",
        "createSql": "CREATE VIEW `${VIEW_NAME}` AS SELECT m.*, mtl.*,\n    (CASE WHEN instr(mtl.meterMeasureUnit, '/') = 0 THEN 0 ELSE 1 END) AS isDerivedUnit, \n    (CASE WHEN instr(mtl.meterMeasureUnit, '/') <> 0 \n        THEN substr(mtl.meterMeasureUnit, instr(mtl.meterMeasureUnit, '/') + 1) \n        ELSE NULL \n    END) AS derivedUnit\nFROM meters m JOIN meters_tl mtl ON mtl.metersId = m.meterId"
      },
      {
        "viewName": "services_view",
        "createSql": "CREATE VIEW `${VIEW_NAME}` AS SELECT s.*, stl.* FROM services s JOIN services_tl stl ON stl.servicesId = s.serviceId\nORDER BY s.servicePos"
      },
      {
        "viewName": "receipts_view",
        "createSql": "CREATE VIEW `${VIEW_NAME}` AS SELECT r.*, rl.* FROM receipts r JOIN receipt_lines rl ON rl.receiptsId = r.receiptId"
      },
      {
        "viewName": "meter_value_max_prev_dates_view",
        "createSql": "CREATE VIEW `${VIEW_NAME}` AS SELECT mv.meterId, MAX(mv.valueDate) AS maxValueDate \nFROM (SELECT m.meterId, m.payersId, \n            ifnull(strftime('%Y-%m-%dT%H:%M:%f', v.valueDate), \n                    ifnull(strftime('%Y-%m-%dT%H:%M:%f', m.passportDate), \n                            strftime('%Y-%m-%dT%H:%M:%f', 'now', 'localtime', 'start of month', '-1 days'))) AS valueDate \n        FROM meters m LEFT JOIN meter_values v ON v.metersId = m.meterId) mv \n    JOIN payers p ON p.payerId = mv.payersId\n WHERE mv.valueDate <= \n    CASE WHEN p.isAlignByPaymentDay = 0 \n        THEN strftime('%Y-%m-%dT%H:%M:%f', 'now', 'localtime', 'start of month', '-1 days')\n        ELSE CASE WHEN datetime('now', 'localtime') > datetime('now', 'localtime', 'start of month', '+' || (ifnull(p.paymentDay, 20) - 1) || ' days')\n                THEN strftime('%Y-%m-%dT%H:%M:%f', 'now', 'localtime', 'start of month', '+' || (ifnull(p.paymentDay, 20) - 1) || ' days')\n                ELSE strftime('%Y-%m-%dT%H:%M:%f', 'now', 'localtime', '-1 months', 'start of month', '+' || (ifnull(p.paymentDay, 20) - 1) || ' days')\n            END\n    END\nGROUP BY mv.meterId"
      },
      {
        "viewName": "meter_payer_services_view",
        "createSql": "CREATE VIEW `${VIEW_NAME}` AS SELECT m.*, s.*, ps.payerServiceId, ps.isMeterOwner, ps.isPrivileges, ps.isAllocateRate\nFROM meters_view m \n    JOIN services_view s ON s.serviceMeterType = m.meterType AND s.serviceLocCode = m.meterLocCode\n    JOIN payers_services ps ON ps.payersId = m.payersId AND ps.servicesId = s.serviceId \nORDER BY m.payersId, s.servicePos"
      },
      {
        "viewName": "meter_value_payment_periods_view",
        "createSql": "CREATE VIEW `${VIEW_NAME}` AS SELECT mvl.*, lv.measureUnit, lv.isDerivedUnit, lv.derivedUnit, lv.meterLocCode, lv.maxValue,\n    lv.payerId, lv.payerServiceId, \n    strftime('%Y-%m-%dT%H:%M:%f', datetime(lv.paymentDate, 'localtime')) || \n        printf('%+.2d:%.2d', ROUND((julianday(lv.paymentDate, 'localtime') - julianday(lv.paymentDate)) * 24), \n            ABS(ROUND((julianday(lv.paymentDate, 'localtime') - julianday(lv.paymentDate)) * 24 * 60) % 60)) AS paymentDate, \n    CAST(strftime('%m', lv.paymentDate) AS INTEGER) AS paymentMonth, \n    CAST(strftime('%Y', lv.paymentDate) AS INTEGER) AS paymentYear\nFROM meter_values mvl JOIN \n    (SELECT mvp.payerId, ps.payerServiceId, mvp.meterId, MAX(strftime('%Y-%m-%dT%H:%M:%f', mvp.valueDate)) maxValueDate, \n        mvp.paymentDate, ifnull(sv.serviceMeasureUnit, mvp.meterMeasureUnit) AS measureUnit, \n        mvp.isDerivedUnit, mvp.derivedUnit, mvp.meterLocCode, mvp.maxValue\n    FROM (SELECT mv.meterId, p.payerId, mv.meterType, v.valueDate, mv.meterMeasureUnit, mv.isDerivedUnit, \n            mv.derivedUnit, mv.meterLocCode, mv.maxValue,\n            (CASE WHEN p.isAlignByPaymentDay = 0\n                THEN strftime('%Y-%m-%dT%H:%M:%f', v.valueDate, 'start of month')\n                ELSE\n                    CASE WHEN datetime(v.valueDate) \n                            BETWEEN datetime(v.valueDate, 'start of month') \n                                AND datetime(v.valueDate, 'start of month', '+' || (ifnull(p.paymentDay, 20) - 1) || ' days') \n                        THEN strftime('%Y-%m-%dT%H:%M:%f', v.valueDate, 'start of month')\n                        WHEN datetime(v.valueDate) \n                            BETWEEN datetime(v.valueDate, 'start of month', '+' || ifnull(p.paymentDay, 20) || ' days') \n                                AND datetime(v.valueDate, '+1 months', 'start of month') \n                        THEN strftime('%Y-%m-%dT%H:%M:%f', v.valueDate, '+1 months', 'start of month') \n                    END\n            END) paymentDate\n        FROM meter_values v JOIN meters_view mv ON mv.meterId = v.metersId\n            JOIN payers p ON p.payerId = mv.payersId) mvp\n        JOIN services_view sv ON sv.serviceMeterType = mvp.meterType AND sv.serviceLocCode = mvp.meterLocCode\n        JOIN payers_services ps ON ps.payersId = mvp.payerId AND ps.servicesId = sv.serviceId \n    GROUP BY mvp.payerId, ps.payerServiceId, mvp.meterId, mvp.paymentDate, sv.serviceMeasureUnit, mvp.meterMeasureUnit,\n            mvp.isDerivedUnit, mvp.derivedUnit, mvp.meterLocCode, mvp.maxValue) lv \n        ON mvl.metersId = lv.meterId \n        AND strftime('%Y-%m-%dT%H:%M:%f', mvl.valueDate) = lv.maxValueDate"
      },
      {
        "viewName": "payer_services_view",
        "createSql": "CREATE VIEW `${VIEW_NAME}` AS SELECT psv.*,\n        strftime('%Y-%m-%dT%H:%M:%f', datetime(psv.fromDate, 'localtime')) || \n            printf('%+.2d:%.2d', ROUND((julianday(psv.fromDate, 'localtime') - julianday(psv.fromDate)) * 24), \n                ABS(ROUND((julianday(psv.fromDate, 'localtime') - julianday(psv.fromDate)) * 24 * 60) % 60)) AS fromServiceDate \nFROM (SELECT sv.*, ps.payerServiceId, ps.payersId, ps.fromMonth, ps.fromYear, \n        strftime('%Y-%m-%dT%H:%M:%f', printf('%d-%02d-01T00:00:00.000', ps.fromYear, ps.fromMonth)) AS fromDate,\n        ps.isMeterOwner, ps.isPrivileges, ps.isAllocateRate \n    FROM services_view sv JOIN payers_services ps ON ps.servicesId = sv.serviceId) psv\nORDER BY psv.servicePos"
      },
      {
        "viewName": "meter_value_prev_periods_view",
        "createSql": "CREATE VIEW `${VIEW_NAME}` AS SELECT mvf.meterValueId, p.payerId, sv.serviceId, sv.serviceType, sv.serviceName, sv.servicePos, \n    mvf.meterId, mvf.meterType, ifnull(mvf.meterMeasureUnit, sv.serviceMeasureUnit) AS measureUnit,\n    strftime('%Y-%m-%dT%H:%M:%f', datetime(mvf.prevLastDate, 'localtime')) || \n        printf('%+.2d:%.2d', ROUND((julianday(mvf.prevLastDate, 'localtime') - julianday(mvf.prevLastDate)) * 24), \n            ABS(ROUND((julianday(mvf.prevLastDate, 'localtime') - julianday(mvf.prevLastDate)) * 24 * 60) % 60)) AS prevLastDate, \n    mvf.prevValue, p.isFavorite, \n    (SELECT vl.meterValue FROM meter_values vl\n        WHERE vl.metersId = mvf.meterId\n            AND strftime('%Y-%m-%dT%H:%M:%f', vl.valueDate) = \n                    (SELECT MAX(strftime('%Y-%m-%dT%H:%M:%f', v.valueDate)) FROM meter_values v\n                        WHERE v.metersId = mvf.meterId\n                            AND strftime('%Y-%m-%dT%H:%M:%f', v.valueDate) > mpd.maxValueDate)\n    ) AS currentValue,\n    mvf.meterLocCode, sv.serviceLocCode, mvf.valueFormat\nFROM (SELECT mvl.meterValueId, mv.payersId, mv.servicesId, mv.meterId, mv.meterType, mv.meterMeasureUnit, \n        ifnull(strftime('%Y-%m-%dT%H:%M:%f', mvl.valueDate), \n                ifnull(strftime('%Y-%m-%dT%H:%M:%f', mv.passportDate),\n                    strftime('%Y-%m-%dT%H:%M:%f', 'now', 'localtime', 'start of month', '-1 days'))) AS prevLastDate, \n        ifnull(mvl.meterValue, mv.initValue) AS prevValue, mv.meterLocCode,\n        substr('#0.' || '0000000000', 1, 3 + (length(cast(mv.maxValue / 100000.0 as text)) - \n            CASE WHEN instr(cast(mv.maxValue / 100000.0 as text), '.') = \n                                    length(cast(mv.maxValue / 100000.0 as text)) - 1\n                THEN length(cast(mv.maxValue / 100000.0 as text)) + 1 \n                ELSE instr(cast(mv.maxValue / 100000.0 as text), '.') \n            END)\n        ) AS valueFormat \n    FROM meter_payer_services_view mv LEFT JOIN meter_values mvl ON mvl.metersId = mv.meterId\n            AND mv.isMeterOwner = 1) mvf\n        JOIN services_view sv ON sv.serviceId = mvf.servicesId AND sv.serviceMeterType = mvf.meterType\n        JOIN payers p ON p.payerId = mvf.payersId\n        JOIN payers_services ps ON ps.servicesId = sv.serviceId AND ps.payersId = p.payerId AND ps.isMeterOwner = 1\n        JOIN meter_value_max_prev_dates_view mpd ON mpd.meterId = mvf.meterId AND mpd.maxValueDate = mvf.prevLastDate\nORDER BY p.payerId, sv.servicePos"
      },
      {
        "viewName": "meter_value_payments_view",
        "createSql": "CREATE VIEW `${VIEW_NAME}` AS SELECT lmv.payerId, lmv.payerServiceId, lmv.metersId, lmv.meterValueId, \n    pmv.meterValue AS startMeterValue, lmv.meterValue AS endMeterValue,\n    (CASE WHEN lmv.isDerivedUnit = 0 \n        THEN CASE WHEN lmv.meterValue >= pmv.meterValue \n                THEN lmv.meterValue - pmv.meterValue \n                ELSE (pmv.maxValue - pmv.meterValue) + lmv.meterValue + (1 - (pmv.maxValue - cast(pmv.maxValue as int ))) \n            END \n        ELSE lmv.meterValue \n    END) AS diffMeterValue, \n    lmv.isDerivedUnit, lmv.derivedUnit, lmv.measureUnit, \n    lmv.paymentDate, \n    lmv.paymentMonth, lmv.paymentYear, lmv.meterLocCode \nFROM meter_value_payment_periods_view lmv \n    JOIN meter_value_payment_periods_view pmv ON pmv.metersId = lmv.metersId \n        AND pmv.payerServiceId = lmv.payerServiceId\n        AND strftime('%Y-%m-%dT%H:%M:%f', pmv.paymentDate) = strftime('%Y-%m-%dT%H:%M:%f', lmv.paymentDate, '-1 months')\n        AND pmv.meterLocCode = lmv.meterLocCode"
      },
      {
        "viewName": "rate_payer_services_view",
        "createSql": "CREATE VIEW `${VIEW_NAME}` AS SELECT rps.*, (CASE WHEN EXISTS (SELECT m.meterId \n                                FROM meters m JOIN services s \n                                    ON s.serviceMeterType = m.meterType AND m.payersId = rps.payerId \n                                        AND s.serviceId = rps.serviceId)\n                    THEN 1 \n                    ELSE 0 \n                END) isMeterUses\nFROM (-- Services rates\n    SELECT p.payerId, p.personsNum, p.totalArea, p.livingSpace, p.heatedVolume, psv.payerServiceId, psv.isAllocateRate, \n        psv.serviceId, psv.serviceName, psv.servicePos, psv.serviceType, psv.serviceLocCode, psv.serviceMeasureUnit, \n        psv.fromServiceDate,\n        r.startDate, r.fromMeterValue, r.toMeterValue, r.rateValue, r.isPerPerson, r.isPrivileges\n    FROM payers p JOIN payer_services_view psv ON psv.payersId = p.payerId \n                                        AND NOT EXISTS(SELECT rateId FROM rates WHERE payersServicesId = psv.payerServiceId)\n        JOIN (SELECT * FROM rates WHERE payersServicesId IS NULL) r ON r.servicesId = psv.servicesId \n                                                                    AND r.isPrivileges = psv.isPrivileges\n    UNION ALL\n    -- Payer services rates\n    SELECT p.payerId, p.personsNum, p.totalArea, p.livingSpace, p.heatedVolume, psv.payerServiceId, psv.isAllocateRate, \n        psv.serviceId, psv.serviceName, psv.servicePos, psv.serviceType, psv.serviceLocCode, psv.serviceMeasureUnit, \n        psv.fromServiceDate,\n        r.startDate, r.fromMeterValue, r.toMeterValue, r.rateValue, r.isPerPerson, r.isPrivileges\n    FROM payers p JOIN payer_services_view psv ON psv.payersId = p.payerId\n        JOIN rates r ON r.payersServicesId = psv.payerServiceId AND r.isPrivileges = psv.isPrivileges) rps"
      },
      {
        "viewName": "payer_service_debts_view",
        "createSql": "CREATE VIEW `${VIEW_NAME}` AS SELECT psd.*, \n    printf('%02d.%d: ', psd.paymentMonth, psd.paymentYear) ||\n    (CASE WHEN psd.isPerPerson = 1\n            -- GAS, GARBAGE\n            THEN printf('%d %s x %.2f %s = %.2f %s', psd.personsNum, psd.personMu, \n                            psd.rateValue / 100000.0, psd.currency, psd.serviceDebt / 100000.0, psd.currency)\n            ELSE CASE 0\n                    WHEN psd.serviceType IN ('RENT') THEN \n                        (CASE WHEN psd.totalArea IS NOT NULL    \n                            THEN printf('%.2f %s x ', psd.totalArea / 100000.0, psd.totalAreaMu) \n                            ELSE '' \n                        END) || \n                            printf('%.2f %s = %.2f %s', psd.rateValue / 100000.0, psd.currency, \n                                                            psd.serviceDebt / 100000.0, psd.currency)                        \n                    WHEN psd.serviceType IN ('HEATING') THEN \n                        (CASE WHEN psd.livingSpace IS NOT NULL \n                            THEN printf('%.2f %s x ', psd.livingSpace / 100000.0, psd.livingSpaceMu) \n                            ELSE '' \n                        END) || \n                            printf('%.2f %s = %.2f %s', psd.rateValue / 100000.0, psd.currency, \n                                                            psd.serviceDebt / 100000.0, psd.currency)                        \n                    -- DOORPHONE, PHONE, INTERNET, USGO\n                    ELSE printf('%.2f %s', psd.serviceDebt / 100000.0, psd.currency)\n                END\n    END) serviceDebtExpr\nFROM (SELECT rps.payerId, rps.personsNum, rps.totalArea, rps.livingSpace, \n        mrv.paymentDate, \n        mrv.paymentMonth, mrv.paymentYear, rps.isPerPerson, rps.servicePos, rps.serviceType, rps.serviceName, \n        rps.serviceLocCode, rps.rateValue, rps.fromMeterValue, rps.toMeterValue, NULL AS rateMeterValue,\n        NULL AS diffMeterValue, rps.serviceMeasureUnit AS measureUnit, 0 AS isDerivedUnit, rps.serviceId, \n        rps.payerServiceId,\n        (CASE WHEN rps.isPerPerson = 1\n            -- GAS, GARBAGE\n            THEN rps.personsNum * rps.rateValue\n            ELSE CASE WHEN rps.serviceType IN ('RENT') THEN ifnull(rps.totalArea / 100000.0, 1) * rps.rateValue\n                    WHEN rps.serviceType IN ('HEATING') THEN ifnull(rps.livingSpace / 100000.0, 1) * rps.rateValue\n                    -- DOORPHONE, PHONE, INTERNET, USGO\n                    ELSE rps.rateValue\n                END\n        END) serviceDebt,\n        rps.isMeterUses,\n        (SELECT paramValue FROM app_settings WHERE paramName = 'PERSON_NUM_MU') AS personMu,\n        (SELECT paramValue FROM app_settings WHERE paramName = 'CURRENCY') AS currency,\n        (SELECT paramValue FROM app_settings WHERE paramName = 'TOTAL_AREA_MU') AS totalAreaMu,\n        (SELECT paramValue FROM app_settings WHERE paramName = 'LIVING_SPACE_MU') AS livingSpaceMu\n    FROM rate_payer_services_view rps LEFT JOIN \n            (SELECT rv.receiptId, rv.payersId, rv.payersServicesId, rv.isLinePaid, \n                    mvp.paymentDate, mvp.paymentMonth, mvp.paymentYear, mvp.meterLocCode\n                FROM meter_value_payments_view mvp LEFT JOIN receipts_view rv \n                    ON rv.payersId = mvp.payerId \n                    AND rv.receiptMonth = mvp.paymentMonth \n                    AND rv.receiptYear = mvp.paymentYear\n                    AND rv.payersServicesId <> mvp.payerServiceId\n            GROUP BY rv.receiptId, rv.payersId, rv.payersServicesId, rv.isLinePaid, \n                    mvp.paymentDate, mvp.paymentMonth, mvp.paymentYear, mvp.meterLocCode) mrv\n                ON ifnull(mrv.payersServicesId, rps.payerServiceId) = rps.payerServiceId\n                    AND ifnull(mrv.isLinePaid, 0) = 0 AND mrv.meterLocCode = rps.serviceLocCode\n    WHERE rps.isMeterUses = 0                                                           -- rates for services without meters\n        AND strftime('%Y-%m-%dT%H:%M:%f', rps.startDate) = ifnull(\n                                                    (SELECT MAX(strftime('%Y-%m-%dT%H:%M:%f', rsv.startDate)) \n                                                    FROM rate_payer_services_view rsv \n                                                    WHERE rsv.payerId = rps.payerId \n                                                        AND rsv.payerServiceId = rps.payerServiceId\n                                                        AND rsv.serviceLocCode = rps.serviceLocCode\n                                                        AND rsv.isMeterUses = 0\n                                                        AND strftime('%Y-%m-%dT%H:%M:%f', rsv.startDate) <= ifnull(strftime('%Y-%m-%dT%H:%M:%f', rps.fromServiceDate), \n                                                                                                                            strftime('%Y-%m-%dT%H:%M:%f', mrv.paymentDate))),\n                                                    strftime('%Y-%m-%dT%H:%M:%f', rps.startDate))) psd\nUNION ALL\nSELECT psd.*, \n    printf('%02d.%d: ', psd.paymentMonth, psd.paymentYear) ||\n    (CASE WHEN psd.isDerivedUnit = 0\n            THEN printf('%.2f %s x %.2f %s = %.2f %s', psd.rateMeterValue / 100000.0, psd.measureUnit,\n                                                        psd.rateValue / 100000.0, psd.currency, \n                                                        psd.serviceDebt / 100000.0, psd.currency)                        \n            ELSE CASE psd.serviceType \n                    WHEN 'HEATING' THEN \n                        printf('%.5f %s x ', psd.rateMeterValue / 100000.0, psd.measureUnit) || \n                        (CASE WHEN psd.livingSpace IS NOT NULL \n                            THEN printf('%.2f %s x ', psd.livingSpace / 100000.0,  psd.livingSpaceMu) \n                            ELSE '' \n                        END) || \n                            printf('%.2f %s = %.2f %s', psd.rateValue / 100000.0, psd.currency, \n                                                        psd.serviceDebt / 100000.0, psd.currency)                        \n                    ELSE printf('%.2f %s', psd.serviceDebt / 100000.0, psd.currency)\n                END\n    END) serviceDebtExpr\nFROM (SELECT rps.payerId, rps.personsNum, rps.totalArea, rps.livingSpace, \n        mvp.paymentDate, \n        mvp.paymentMonth, mvp.paymentYear, 0 AS isPerPerson, rps.servicePos, rps.serviceType, rps.serviceName, \n        rps.serviceLocCode, rps.rateValue, rps.fromMeterValue, rps.toMeterValue, \n        (CASE WHEN mvp.diffMeterValue <= ifnull(rps.toMeterValue, mvp.diffMeterValue)\n                THEN mvp.diffMeterValue - ifnull(rps.fromMeterValue, 0)\n            ELSE ifnull(rps.toMeterValue, 0) - ifnull(rps.fromMeterValue, 0)\n        END) AS rateMeterValue,\n        mvp.diffMeterValue, mvp.measureUnit, \n        mvp.isDerivedUnit, rps.serviceId, rps.payerServiceId,\n        (CASE WHEN mvp.isDerivedUnit = 0\n            THEN rps.rateValue *         \n                (CASE WHEN mvp.diffMeterValue <= ifnull(rps.toMeterValue, mvp.diffMeterValue)\n                        THEN mvp.diffMeterValue - ifnull(rps.fromMeterValue, 0)\n                    ELSE ifnull(rps.toMeterValue, 0) - ifnull(rps.fromMeterValue, 0)\n                END) / 100000.0\n            ELSE CASE rps.serviceType \n                    WHEN 'HEATING' THEN ifnull(rps.livingSpace / 100000.0, 1) * \n                                                                mvp.diffMeterValue / 100000.0 * rps.rateValue\n                    ELSE rps.rateValue\n                END\n        END) AS serviceDebt,\n        rps.isMeterUses,\n        NULL AS personMu,\n        (SELECT paramValue FROM app_settings WHERE paramName = 'CURRENCY') AS currency,\n        NULL AS totalAreaMu,\n        (SELECT paramValue FROM app_settings WHERE paramName = 'LIVING_SPACE_MU') AS livingSpaceMu        \n    FROM rate_payer_services_view rps JOIN meter_value_payments_view mvp \n        ON mvp.payerId = rps.payerId AND mvp.payerServiceId = rps.payerServiceId\n            AND mvp.meterLocCode = rps.serviceLocCode\n            AND strftime('%Y-%m-%dT%H:%M:%f', rps.startDate) = ifnull(\n                                                    (SELECT MAX(strftime('%Y-%m-%dT%H:%M:%f', rsv.startDate)) \n                                                    FROM rate_payer_services_view rsv \n                                                    WHERE rsv.payerId = rps.payerId \n                                                        AND rsv.payerServiceId = rps.payerServiceId\n                                                        AND rsv.serviceLocCode = rps.serviceLocCode\n                                                        AND rsv.isMeterUses = 1                 -- meters service rates\n                                                        AND strftime('%Y-%m-%dT%H:%M:%f', rsv.startDate) <= strftime('%Y-%m-%dT%H:%M:%f', mvp.paymentDate)),\n                                                    strftime('%Y-%m-%dT%H:%M:%f', rps.startDate))\n            AND mvp.diffMeterValue >= ifnull(rps.fromMeterValue, mvp.diffMeterValue)\n        LEFT JOIN receipts_view rv ON rv.receiptMonth = mvp.paymentMonth AND rv.receiptYear = mvp.paymentYear\n                                AND rv.meterValuesId = mvp.meterValueId\n    WHERE rps.isMeterUses = 1 AND ifnull(rv.isLinePaid, 0) = 0) psd"
      },
      {
        "viewName": "payer_service_subtotal_debts_view",
        "createSql": "CREATE VIEW `${VIEW_NAME}` AS SELECT pss.payerId, \n        strftime('%Y-%m-%dT%H:%M:%f', datetime(pss.fromPaymentDate, 'localtime')) || \n            printf('%+.2d:%.2d', ROUND((julianday(pss.fromPaymentDate, 'localtime') - julianday(pss.fromPaymentDate)) * 24), \n                ABS(ROUND((julianday(pss.fromPaymentDate, 'localtime') - julianday(pss.fromPaymentDate)) * 24 * 60) % 60)) AS fromPaymentDate, \n        strftime('%Y-%m-%dT%H:%M:%f', datetime(pss.toPaymentDate, 'localtime')) || \n            printf('%+.2d:%.2d', ROUND((julianday(pss.toPaymentDate, 'localtime') - julianday(pss.toPaymentDate)) * 24), \n                ABS(ROUND((julianday(pss.toPaymentDate, 'localtime') - julianday(pss.toPaymentDate)) * 24 * 60) % 60)) AS toPaymentDate, \n        pss.serviceId, pss.payerServiceId, pss.MonthsCount, pss.servicePos, pss.serviceType, pss.serviceName, \n        pss.serviceLocCode, pss.rateValue, pss.fromMeterValue, pss.toMeterValue, \n        pss.diffMeterValue, measureUnit, pss.serviceDebt, pss.isMeterUses\nFROM (SELECT payerId, \n            MIN(strftime('%Y-%m-%dT%H:%M:%f', paymentDate)) AS fromPaymentDate, \n            MAX(strftime('%Y-%m-%dT%H:%M:%f', paymentDate)) AS toPaymentDate, \n            serviceId, payerServiceId, COUNT(payerServiceId) AS monthsCount, servicePos, serviceType, serviceName, \n            serviceLocCode, rateValue, fromMeterValue, toMeterValue, \n            SUM(diffMeterValue) AS diffMeterValue, measureUnit, SUM(serviceDebt) AS serviceDebt, \n            isMeterUses\n    FROM payer_service_debts_view\n    GROUP BY payerId, serviceId, payerServiceId, servicePos, serviceType, serviceName, serviceLocCode, rateValue, \n            fromMeterValue, toMeterValue, measureUnit, isMeterUses) pss\nORDER BY payerId, fromPaymentDate, servicePos"
      },
      {
        "viewName": "payer_total_debts_view",
        "createSql": "CREATE VIEW `${VIEW_NAME}` AS SELECT ptb.payerId, \n        strftime('%Y-%m-%dT%H:%M:%f', datetime(ptb.fromPaymentDate, 'localtime')) || \n            printf('%+.2d:%.2d', ROUND((julianday(ptb.fromPaymentDate, 'localtime') - julianday(ptb.fromPaymentDate)) * 24), \n                ABS(ROUND((julianday(ptb.fromPaymentDate, 'localtime') - julianday(ptb.fromPaymentDate)) * 24 * 60) % 60)) AS fromPaymentDate, \n        strftime('%Y-%m-%dT%H:%M:%f', datetime(ptb.toPaymentDate, 'localtime')) || \n            printf('%+.2d:%.2d', ROUND((julianday(ptb.toPaymentDate, 'localtime') - julianday(ptb.toPaymentDate)) * 24), \n                ABS(ROUND((julianday(ptb.toPaymentDate, 'localtime') - julianday(ptb.toPaymentDate)) * 24 * 60) % 60)) AS toPaymentDate, \n        ptb.serviceLocCode, ptb.totalDebt\nFROM (SELECT payerId, \n        MIN(strftime('%Y-%m-%dT%H:%M:%f', fromPaymentDate)) AS fromPaymentDate, \n        MAX(strftime('%Y-%m-%dT%H:%M:%f', toPaymentDate)) AS toPaymentDate, \n        serviceLocCode, SUM(serviceDebt) AS totalDebt\n    FROM payer_service_subtotal_debts_view\n    GROUP BY payerId, serviceLocCode) ptb"
      }
    ],
    "setupQueries": [
      "CREATE TABLE IF NOT EXISTS room_master_table (id INTEGER PRIMARY KEY,identity_hash TEXT)",
      "INSERT OR REPLACE INTO room_master_table (id,identity_hash) VALUES(42, '3d3633bcd011a034a226a4532d841fc2')"
    ]
  }
}