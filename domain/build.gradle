plugins {
    id 'com.android.library'
    id 'org.jetbrains.kotlin.android'
    id 'dagger.hilt.android.plugin'
    id 'org.jetbrains.kotlin.kapt'
}
android {
    compileSdk cfg.sdk.compileVersion

    defaultConfig {
        minSdk cfg.sdk.minVersion
        targetSdk cfg.sdk.targetVersion
        kapt {
            //ERROR : error.NonExistentClass Kotlin In multi module Dagger project
            //https://kotlinlang.org/docs/reference/kapt.html#non-existent-type-correction
            correctErrorTypes = true
        }
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility cfg.jvm.compatibility.source
        targetCompatibility cfg.jvm.compatibility.target

        // Desugaring: Newer versions of the Android Gradle plugin (starting with 4.0) are able to use desugaring to
        // backport new APIs to older versions of Android.
        // You can read more about it here: https://jakewharton.com/d8-library-desugaring/
        // https://www.rockandnull.com/java-time-android/
        //coreLibraryDesugaringEnabled true
    }
    kotlinOptions {
        jvmTarget = cfg.jvm.target
    }
    namespace 'com.oborodulin.home.domain'
}

dependencies {
    implementation(project(":common"))

    // Logging
    implementation deps.logging.timber
    implementation deps.logging.logger
    // Hilt
    implementation deps.dagger.hilt
    kapt deps.dagger.compiler
    implementation deps.hilt.navigationCompose
    // Desugaring
    //coreLibraryDesugaring deps.tools.desugar

    implementation deps.kotlinx.coroutinesCore
    implementation deps.jvm.inject

    implementation deps.retrofit2.retrofit

    implementation deps.androidx.coreKtx
    implementation deps.androidx.appcompat
    implementation deps.google.material

    // Testing dependencies
    kaptAndroidTest deps.dagger.compiler
    testImplementation deps.test.junit
    androidTestImplementation deps.dagger.testing
    androidTestImplementation deps.test.extJunit
    androidTestImplementation deps.test.espressoCore
}